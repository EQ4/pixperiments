#!/usr/bin/env python
import lilv
from hashlib import md5
import subprocess
import sys


def main():
    """ LV2 plugin binaries are designed to be accessed via a symbol
    'lv2_descriptor'.
    This is a problem when linking statically as the descriptor symbols clash.
    This script renames the symbols to a name containing the md5 hash of the
    plugin uri, and also writes a C header (.h) file containing info about the
    available plugins, and a file containing a list of plugin libraries for
    linking."""

    world = lilv.World()
    world.load_all()
    lv2_InputPort  = world.new_uri(lilv.LILV_URI_INPUT_PORT)
    lv2_OutputPort = world.new_uri(lilv.LILV_URI_OUTPUT_PORT)
    lv2_AudioPort  = world.new_uri(lilv.LILV_URI_AUDIO_PORT)

    plugins = world.get_all_plugins()
    initial_plugin_list = []
    for plugin in plugins:
        uri = plugin.get_uri().as_string()
        #TODO: get port indexes automatically. Somehow.
        if 'mda' in uri:
            if 'Shepard' in uri:
                continue
                midi_input_port_index = -1
                midi_output_port_index = -1
                audio_input_left_port_index = -1
                audio_input_right_port_index = -1
                audio_output_left_port_index = 5
                audio_output_right_port_index = 6
            else: continue
        else:
            midi_input_port_index = 0
            midi_output_port_index = -1
            audio_input_left_port_index = -1
            audio_input_right_port_index = -1
            audio_output_left_port_index = 1
            audio_output_right_port_index = 2

#n_audio_in  = plugin.get_num_ports_of_class(lv2_InputPort,  lv2_AudioPort)
#n_audio_out = plugin.get_num_ports_of_class(lv2_OutputPort, lv2_AudioPort)
#        print dir(plugin)
#        for i in range(0, plugin.get_num_ports()):
#            port = plugin.get_port_by_index(i)
#            if port.is_a(lv2_InputPort):
#                input_ports.append(i)
#            if port.is_a(lv2_OutputPort):
#                input_ports.append(i)
        library = lilv.lilv_uri_to_path(plugin.get_library_uri().as_string())
        initial_plugin_list.append({'uri': uri,
                                    'library': library,
                                    'midi_input_port_index': midi_input_port_index,
                                    'midi_output_port_index': midi_output_port_index,
                                    'audio_input_left_port_index': audio_input_left_port_index,
                                    'audio_input_right_port_index': audio_input_right_port_index,
                                    'audio_output_left_port_index': audio_output_left_port_index,
                                    'audio_output_right_port_index': audio_output_right_port_index,
                                    'symbol': "lv2_descriptor_%s" % md5(uri).hexdigest()})
        print uri, md5(uri).hexdigest()
    f = open("descriptors.h", "w")
    f.write("/* This file is automatically generated by staticizer.py*/\n\n")

    plugin_list = []
    for p in initial_plugin_list:
        try:
            subprocess.check_output(["arm-none-eabi-objcopy", "--redefine-sym", "lv2_descriptor=%s" % (p['symbol'],), p['library']], stderr=subprocess.STDOUT)
        except subprocess.CalledProcessError  as e:
            print "Failed to process %s (%d): %s" % (p['uri'], e.returncode, e.output)
            continue
#        print p
        plugin_list.append(p)

    for p in plugin_list:
        f.write("extern const LV2_Descriptor *%s(uint32_t index);\n" % p['symbol'])

#    f.write("\nconst void* lv2_descriptor_loaders[] = {\n")
    f.write("\nLv2Plugin plugins[] = {\n")
    for p in plugin_list:
#        f.write("    %s,\n" % p['symbol'])
        f.write("    {%s, %d, %d, %d, %d, %d, %d, NULL },\n" % (
                                                                p['symbol'],
                                                                p['midi_input_port_index'],
                                                                p['midi_output_port_index'],
                                                                p['audio_input_left_port_index'],
                                                                p['audio_input_right_port_index'],
                                                                p['audio_output_left_port_index'],
                                                                p['audio_output_right_port_index'],))
    f.write("};\n\n")
    f.write("unsigned int num_plugins = %d;\n\n" % (len(plugin_list), ))
    f.close()
    f = open("plugin_library_list.txt", "w")
    f.write(" ".join([p['library'] for p in plugin_list]))
    f.close()


if __name__ == "__main__":
    main()
